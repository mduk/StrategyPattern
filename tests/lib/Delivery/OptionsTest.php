<?php

namespace Delivery;

require_once dirname(__FILE__) . '/../../../lib/Delivery/Options.php';

class MockDeliveryOptionOne implements \Delivery\Strategy
{
	public function getName()
	{
		return "Option 1";
	}

	public function confirm(Estimate $estimate)
	{
		return true;
	}

	public function getEstimate(Consignment $cargo, Address $destination)
	{
		return new \Delivery\Estimate( array(
			'strategy' => $this,
			'cost' => 2.5,
			'time' => '5 Working Days'
		) );
	}
}

class MockDeliveryOptionTwo implements \Delivery\Strategy
{
	public function getName()
	{
		return "Option 2";
	}

	public function confirm(Estimate $estimate)
	{
		return true;
	}

	public function getEstimate(Consignment $cargo, Address $destination)
	{
		return new \Delivery\Estimate( array(
			'strategy' => $this,
			'cost' => 15.00,
			'time' => 'Next Day (Including Weekends)'
		) );
	}
}

/**
 * Test class for Options.
 * Generated by PHPUnit on 2012-03-22 at 12:51:03.
 */
class OptionsTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var Options
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Options();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Delivery\Options::getEstimates
	 * @todo Implement testGetEstimates().
	 */
	public function testGetEstimates()
	{
		$estimates = $this->object->getEstimates(
			new \Mock\Delivery\Consignment,
			new \Mock\Delivery\Address
		);
		$this->assertEquals( true, is_array( $estimates ) );
		$this->assertInstanceOf( '\\Delivery\\Estimate', $estimates[0] );
		$this->assertEquals( 4, count( $estimates ) );
	}

	/**
	 * @covers Delivery\Options::confirm
	 * @todo Implement testConfirm().
	 */
	public function testConfirm()
	{
		$estimates = $this->object->getEstimates(
			new \Mock\Delivery\Consignment,
			new \Mock\Delivery\Address
		);
		
		$this->assertEquals( true, $this->object->confirm( $estimates[0] ) );
	}
	
	public function testCustomStrategies()
	{
		$this->object = new Options( array(
			'\\Mock\\Delivery\\Strategy\\RoyalMail\\Recorded',
			'\\Mock\\Delivery\\Strategy\\Ups\\International'
		) );
		
		$estimates = $this->object->getEstimates(
			new \Mock\Delivery\Consignment,
			new \Mock\Delivery\Address
		);
		$this->assertEquals( true, is_array( $estimates ) );
		$this->assertInstanceOf( '\\Delivery\\Estimate', $estimates[0] );
		$this->assertEquals( 2, count( $estimates ) );
	}
	
	public function testInvalidStrategy()
	{
		$this->object = new Options( array(
			'\\Mock\\Delivery\\Address'
		) );
		
		try
		{
			$estimates = $this->object->getEstimates(
				new \Mock\Delivery\Consignment,
				new \Mock\Delivery\Address
			);
		}
		catch ( Exception $e )
		{
			$this->assertEquals(
				$e->getCode(), 
				\Delivery\Exception::INVALID_STRATEGY 
			);
		}
	}
}

?>
